h1. Models

The following example will be used in illustrating Model tricks:

<pre><code>Post belongsTo User
User hasMany Post
Post hasAndBelongsToMany Tag
Tag hasAndBelongsToMany Post
Post belongsTo Category
Category belongsTo Post
</code></pre>

h2. Recursive Queries

CakePHP's @Model@ class has a property called @$recursive@. Here is the little docblock on it:

<pre><code>
/**
 * Number of associations to recurse through during find calls. Fetches only
 * the first level by default.
 *
 * @var integer
 * @access public
 * @link http://book.cakephp.org/view/1057/Model-Attributes#recursive-1063
 */
	var $recursive = 1;
</code></pre>

So by default, the following query:

@$user = $this->User->find('first')@

Will retrieve the following data:

<pre><code>$user = array(
    'User' => array(
        'id'        => 1,
        'username'  => 'bob'
        'password'  => 'SOMEHASH'
    ),
    'Post' => array(
        0 => array(
            [id] => 1
            [title] => First article
            [content] => aaa
            [created] => 2008-05-18 00:00:00
        ),
        1 => array(
            [id] => 2
            [title] => Second article
            [content] => bbb
            [created] => 2008-05-19 00:00:00
        ),
        2 => array(
            [id] => 3
            [title] => Third article
            [content] => ccc
            [created] => 2008-05-20 00:00:00
        ),
        ...
    )
)
</code></pre>

Recursive set to a value of @1@ means it will grab all first level relations. A good practice is to place the following in your AppModel:

<pre><code><?php
class AppModel extends Model {
    var $recursive = -1;
}
?>
</code></pre>

Your queries will no longer grab extra related model data. This is good because as you expand your application, you will forget that one model that is related to everything, do a pagination, and bring down your application.

h2. Containable Behavior

Containable Behavior is really good at finding related model data. It has been in the core since at least 1.2 stable, and combined with the above trick, allows you to fish out exactly the data you need and no more. This also allows you to continue down a recursive chain and grab data even deeper down the model chain.

<pre><code><?php
class AppModel extends Model {
    var $actsAs = array('Containable');
}
?>
</code></pre>

It is defined for all Models in this example, as it should be if setting @var $recursive = -1@. Attaching it manually is not preferred unless you are migrating a large application to use Containable Behavior:

@$this->User->Behaviors->attach('Containable');@

Given the example above, and that the model has @recursive@ set to @-1@, the following query:

@$user = $this->User->find('first')@

Will retrieve the following data:

<pre><code>$user = array(
    'User' => array(
        'id'        => 1,
        'username'  => 'bob'
        'password'  => 'SOMEHASH'
    ),
)
</code></pre>

What if we also want all Posts containing the @article@ in the title?

<pre><code>$user = $this->User->find('first', array(
    'contain' => array(
        'Post' => array(
            'conditions' => array('Post.title LIKE' => '%article%'),
        )
    )
))</code></pre>

And the tags for each of those posts:

<pre><code>$user = $this->User->find('first', array(
    'contain' => array(
        'Post' => array(
            'conditions' => array('Post.title LIKE' => '%article%'),
            'Tag',
        )
    )
));</code></pre>

Using Containable Behavior is good cake.

h2. Linkable Behavior

h2. Lazy Model

This is a neat trick. By default, CakePHP instantiates the model chain. This means that if you use the @Post@ model, a @User@, @Tag@, and @Category@ model would also be instantiated because they are all related to the @Post model@. Depending upon the size of those classes, the hit could be great. Lazy Model is a great way to take care of this.

There are many implementations, but the current consensus seems to be that "Frank de Graaf's":http://www.frankdegraaf.net/ "Lazy Model":http://github.com/Phally/lazy_model is the most useful.

Setup is simple. Clone the plugin to your APP/plugins directory (or as a git submodule in that folder). Then do the following:

<pre><code><?php
App::import('Lib', 'LazyModel.LazyModel');
class AppModel extends LazyModel {
}
?></code></pre>

And off to the races your application goes. Please be aware that setting @$recursive@ to higher than @-1@ is not advised with this method. There are other caveats, please consult the "lazy model readme":http://github.com/Phally/lazy_model for more details

h2. Custom Find Types

A Model Find Type is a shortcut to find options. For example, the following two finds are equivalent

@$this->User->find('first');@
@$this->User->find('all', array('limit' => 1));@

The following are core find types:

# @first@
# @all@
# @count@
# @list@
# @threaded@
# @neighbors@

Become familiar with them, they are incredibly useful.

But what about other types? Maybe we want a @latest@ find type, that grabs the latest 3 approved posts. Lets create just that.

Custom find types need two things, to be enabled in the model:

<pre><code><?php
class Post extends AppModel {
    var $_findMethods = array('latest' => true);
}
?></code></pre>

And a custom find method

<pre><code><?php
class Post extends AppModel {
    var $_findMethods = array('latest' => true);

    function _findLatest($state, $query, $results = array()) {
        if ($state === 'before') {
            if (empty($query['limit'])) {
                $query['limit'] = 3;
            }
            $query['conditions']['approved'] = 1;

            if (!empty($query['operation'])) {
                return $this->_findCount($state, $query, $results);
            }
            return $query;
        }
        if (!empty($query['operation'])) {
            return $this->_findCount($state, $query, $results);
        }
        return $results;
    }
}
?></code></pre>

In a custom find method, we need to handle two states, the @before@ and @after@ state. The @before@ state sets up a query so that it can be further processed via Model Behaviors and the CakePHP model class. The @after@ state exists so that we can further process the data for, eg. Sanitization.

You'll notice the @before@ state is handled just fine (@if ($state == 'before')@), and since we return before we leave the statement, we never need to worry about accidentally returning an @after@ state. There is also the following:

<pre><code>if (!empty($query['operation'])) {
    return $this->_findCount($state, $query, $results);
}
</code></pre>

That is there to support pagination. You'll need the following code in either your @Model@, @AppModel@, or @PluginAppModel@:

<pre><code><?php
class AppModel extends Model {

/**
 * Removes 'fields' key from count query on custom finds when it is an array,
 * as it will completely break the Model::_findCount() call
 *
 * @param string $state Either "before" or "after"
 * @param array $query
 * @param array $data
 * @return int The number of records found, or false
 * @access protected
 * @see Model::find()
 */
    function _findCount($state, $query, $results = array()) {
        if ($state == 'before' && isset($query['operation'])) {
            if (!empty($query['fields']) && is_array($query['fields'])) {
                if (!preg_match('/^count/i', $query['fields'][0])) {
                    unset($query['fields']);
                }
            }
        }
        return parent::_findCount($state, $query, $results);
    }

/**
 * Custom Model::paginateCount() method to support custom model find pagination
 *
 * @param array $conditions
 * @param int $recursive
 * @param array $extra
 * @return array
 */
    function paginateCount($conditions = array(), $recursive = 0, $extra = array()) {
        $parameters = compact('conditions');

        if ($recursive != $this->recursive) {
            $parameters['recursive'] = $recursive;
        }

        if (isset($extra['type'])) {
            $extra['operation'] = 'count';
            return $this->find($extra['type'], array_merge($parameters, $extra));
        } else {
            return $this->find('count', array_merge($parameters, $extra));
        }
    }
}
?>
</code></pre>

We need to partially override @Model::_findCount()@ as performing a @Model::find('count')@ when the @fields@ key is set to an array will result an erroneous database query. The custom @Model::paginateCount()@ query is used in order to properly set the correct @Model::find()@. It is called automatically within @Controller::paginate()@. It is possible to leave this method in the @AppModel@ if you plan on using more than one custom pagination in many models.

Below we can see the usage of our custom @Post::find('latest')@ method.s

<pre><code><?php
class PostsController extends AppController {
    function latest() {
        $this->paginate = array('latest');
        $this->set('posts', $this->paginate());
    }

    function latestSidebar($limit = 3) {
        if (!$this->RequestHandler->isAjax()) {
            return false;
        }
        $this->set('posts', $this->Post->find('latest', array(
            'limit' => $limit
        )));
    }
}
?>
</code></pre>

The awesome thing is that you can use all the normal Model stuff, like Behaviors - @Containable@ and @Linkable@ are a few - pagination, model callbacks etc. This is a great way to write good cake that is based on the core practices, testable, and DRY.
