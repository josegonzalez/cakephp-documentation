h1. Model View Controller

MVC is an acronym for Model-View-Controller, which is a software pattern designed to separate application logic from presentation. In the context of a blog application, Models would contain the logic for validating, saving, and retrieving posts to the database, fetching tweets from Twitter, and collating data for analytics. Controllers would ensure that only users who are authenticated in the correct way can log into the Blog backend, and send data to the View, which would in-turn display response codes, validation errors, and content to the users browser.

In the above example, Models are meant to interact with raw datasources. One may have a Twitter Datasource, a Google Analytics Datasource, and a MySQL DatabaseSource. They act as the final arbiter and gateway between the Controller and the data itself. Validation of incoming data occurs at this level, as does saving and updating records and documents. It is always best to place complex logic in a Model, to modify the data here before sending it to the Controller, as it is easier to test for inconsistencies and change things site-wide. A good practice is to place any calls to a service or datasource within the Model as the Model's domain is data manipulation.

Controllers are used specifically for ensuring the correct messages and data is passed between the Model and the View. They are intermediaries, and based upon the Model response, should return error messages the data itself. It is also possible to set HTTP response codes herein, or to collate data from various models at once. That said, applications should follow the "Fat Model Skinny Controller" mantra so as to reduce the amount of data being passed around and keep code complexity to a minimum.

A View is in the presentation layer, and may be anything from a JSON response to an HTTP Response Code. Web applications usually use views to represent data using HTML or it's derivatives in such a way that it can be interpreted by the browser. Views can contain Javascript effects, inline CSS or calls to external Java applets and Flash widgets. It is possible to create a RESTful API in the View layer, or a content management system may instead be implemented. Views are flexible but should only act upon the data received from the Controller, and should therefore only have logic related to presentation.